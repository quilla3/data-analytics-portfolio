!record solution1.txt

SELECT O.O_CUSTKEY, L.L_SUPPKEY, SUM(L.L_QUANTITY) AS TOTAL_ORDER_PARTS 
FROM LINEITEM L 
JOIN ORDERS O ON L.L_ORDERKEY = O.O_ORDERKEY 
WHERE O.O_CLERK in ('Clerk#000000988', 'Clerk#000000992') 
GROUP BY O.O_CUSTKEY, L.L_SUPPKEY WITH CUBE;


SELECT L_PARTKEY, L_SUPPKEY, MAX(L_DISCOUNT) AS MAX_DISCOUNT 
FROM LINEITEM 
WHERE L_PARTKEY IN (18, 19, 20) 
GROUP BY L_PARTKEY, L_SUPPKEY WITH ROLLUP;


SELECT YEAR(O.O_ORDERDATE) AS ORDER_YEAR, O.O_CLERK, 
       MIN(L.L_EXTENDEDPRICE) AS SMALLEST_PRICE 
FROM LINEITEM L 
JOIN ORDERS O ON L.L_ORDERKEY = O.O_ORDERKEY 
GROUP BY YEAR(O.O_ORDERDATE), O.O_CLERK 
GROUPING SETS (YEAR(O.O_ORDERDATE), (O.O_CLERK));


SELECT PS_PARTKEY, PS_AVAILQTY, 
       MIN(PS_AVAILQTY) OVER (PARTITION BY PS_PARTKEY) AS SMALLEST_AVAILQTY, 
       AVG(PS_AVAILQTY) OVER (PARTITION BY PS_PARTKEY) AS AVERAGE_AVAILQTY 
FROM PARTSUPP 
WHERE PS_PARTKEY IN (18, 19, 20);


SELECT PS_PARTKEY, PS_AVAILQTY, 
       ROW_NUMBER() OVER (PARTITION BY PS_PARTKEY ORDER BY PS_AVAILQTY DESC) AS RANK 
FROM PARTSUPP 
WHERE PS_PARTKEY IN (18, 19, 20) 
ORDER BY PS_PARTKEY, RANK;


SELECT PS_PARTKEY, PS_AVAILQTY, 
       AVG(PS_AVAILQTY) OVER (PARTITION BY PS_PARTKEY ORDER BY PS_AVAILQTY ASC 
                              ROWS UNBOUNDED PRECEDING) AS RUNNING_AVG_AVAILQTY 
FROM PARTSUPP 
WHERE PS_PARTKEY IN (18, 19, 20) 
ORDER BY PS_PARTKEY, PS_AVAILQTY ASC;

!record
